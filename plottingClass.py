__author__ = "Carlos Ardila Gutierrez"
__maintainer__ = "Carlos Ardila Gutierrez"
__email__ = "carlos2248383@correo.uis.edu.co"
__date__ = "January 06, 2025"

import matplotlib.pyplot as plt
import os
import numpy as np


class plottingTools:
    '''
    Class to plot physics graph.
    ==========
    Parameters
    ==========
        - property:
        - 
        -

    ======
    Return
    ======
        None.
    ======
    Tested compatibility
    ======
        - matplotlib 3.10.0
        - numpy 2.2.1
        - pyqt5
    '''
    def __init__(self):
        pass

    def _read_bands_vaspkit(self, path_read, fermi=False, kticks_bool=False):
        '''
        Reads the band structure generated by vaspkit1.3.5. It
        works for both spin and spinless calculations.

        ==========
        Parameters
        ==========
            - property:
            - 
            -

        ======
        Return
        ======
            None.
        '''
        # ------ single band structure file for both spin ------
        path_band = path_read + '/REFORMATTED_BAND.dat'
        if os.path.isfile(path_band):
            data = np.loadtxt(path_band, skiprows=1)
            data = data.transpose()
            kpoints = data[0]
            E = data[1:]
        # ------- band structure files splitted by spin --------
        else:
            path_band_dw = path_read + '/REFORMATTED_BAND_DW.dat'
            path_band_up = path_read + '/REFORMATTED_BAND_UP.dat'
            data = np.loadtxt(path_band_dw, skiprows=1)
            data = data.transpose()
            kpoints = data[0]
            E = data[1:]
            data = np.loadtxt(path_band_up, skiprows=1)
            data = data.transpose()
            E = np.append(E, data[1:], axis=0)
        # ------- Adjust fermi level from FERMI_ENERGY file ----
        if fermi:
            path_Efermi = path_read + '/FERMI_ENERGY'
            Efermi = np.loadtxt(path_Efermi, skiprows=1)
            for i in range(len(E)):
                E[i] += Efermi
        # ------- kticks --------
        if kticks_bool:
            klabel, kticks = [], []
            with open(path_read + '/KLABELS') as data_file:
                for data in data_file:
                    if len(data.split())==2:
                        label = data.split()[0]
                        tick = eval(data.split()[1])
                        klabel.append(label)
                        kticks.append(tick)
            kticks = np.array(kticks)
        # ------- return data --------
        if kticks_bool:
            return kpoints, E, klabel, kticks
        else:
            return kpoints, E

    def plot_bands_vaspkit(self,
                           path_read,
                           E_limit=[-1, 1],
                           E_zero=0,
                           E_vaspkit=False,
                           klabels=None,
                           label=None,
                           color='k',
                           ax=None,
                           show=False):
        '''
        Plot the band structure generated by vaspkit1.3.5. It
        works for both spin and spinless calculations.

        ==========
        Parameters
        ==========
            path_read
                - Path to the folder where the band structure files are located.
            E_limit=[-1 1]
                - Energy limits of the graph.
            E_zero=0
                - Energy reference.
            E_vaspkit=False
                - If True, the fermi level is adjusted by the value on FERMI_ENERGY file, plus the value on 'E_zero'.
            klabels=None
                - Labels of the high symmetry k-points.
            label=None
                - Label of the band. If None, it is read the labels on the KLABELS file.
            color='k'
                - Color of the band.
            ax=None
                - Axes object to plot the band.
            show=False
                - If True, the graph is shown.

        ======
        Return
        ======
            ax, fig.
        '''
        # -------------- reads info --------------
        if klabels is None:
            kpoints, E, klabels, kticks = self._read_bands_vaspkit(path_read, fermi=E_vaspkit, kticks_bool=True)
        else:
            kpoints, E = self._read_bands_vaspkit(path_read, fermi=E_vaspkit, kticks_bool=False)
            klabels, kticks = klabels
        # ------------ ax, fig objects -----------
        if ax==None:
            fig, ax = plt.subplots()
        else:
            # IMPORTANTE: CREO QUE ES MEJOR GRAFICAR COMO SI FUERAN DISTINTOS EJES
            # referenceTicks = ax.get_xticks()
            # kpoints, kTicks = fixKpath(referenceTicks, kpoints, kTicks)
            pass
        # -------------- plot bands --------------
        n = 0
        for band in E:
            band = band-E_zero
            if n==0 and label is not None:
                n+=1
                ax.plot(kpoints, band, c=color, linewidth=1.3, label=label)
            else:
                ax.plot(kpoints, band, c=color, linewidth=1.3)
        # ------ plot klabels and set limits ------
        for ktick in kticks:
            ax.axvline(ktick, color='gray', linewidth=0.2)
        ax.set_xticks(kticks)
        ax.set_xticklabels(klabels)

        ax.set_xlim([kticks[0], kticks[-1]])
        ax.set_ylim(E_limit)
        ax.set_ylabel(r'$E-E_{F} [eV]$')
        ax.axhline(0, color='gray', linewidth=0.2)

        if show:
            plt.show()
        
        return ax, fig

class styler:
    '''
    Class to control style details of the graph.    
    '''
    def __init__(self):
        pass